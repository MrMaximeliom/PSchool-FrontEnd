@inject PageUrls PageUrls;
@attribute [Route(PageUrls.ADD_STUDENT_URL)];
@using TestBlazor.Models
@inject IStudentHandler StudentHandler;
@inject SweetAlertService Swal;
@inject NavigationManager NavigationManager


<PageTitle>Add Students</PageTitle>

<h4>Add New Students</h4>



<EditForm Model="StudentForm" OnValidSubmit="Submit" FormName="add-student">
    <AntiforgeryToken />
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group mx-sm-3 mb-3 mx-lg-4 mx-md-4 w-25">
        <label for="exampleFormControlSelect1">Parent Name</label>
        <select class="form-control" id="exampleFormControlSelect1" required @bind="StudentForm!.ParentId">
            <option selected value="">Choose...</option>
            @if (ParentDetails != null)
            {
                @foreach (var parent in ParentDetails)
                {
                    <option value="@parent.Id">@parent.FullName</option>


                }
            }
        </select>
    </div>
    <div class="form-group mx-sm-3 mb-3 mx-lg-4 mx-md-4 w-25">
        <label for="exampleInputEmail1">First Name</label>
        <InputText @bind-Value="StudentForm!.FirstName" type="text" class="form-control" id="exampleInputStudentFirstName" placeholder="Enter student first name" required />
    </div>
    <div class="form-group mx-sm-3 mb-3 mx-lg-4 mx-md-4 w-25">
        <label for="exampleInputEmail1">Last Name</label>
        <InputText @bind-Value="StudentForm!.LastName" type="text" class="form-control" id="exampleInputStudentLastName" placeholder="Enter student last name" required />
    </div>
    <div class="form-group mx-sm-3 mb-3 mx-lg-4 mx-md-4 w-25 mt-3">
        <button type="submit" class="btn btn-primary">Add</button>
    </div>
</EditForm>

@if(errorMessage != null)
{
    <p>@errorMessage</p>
}


@code{
    [SupplyParameterFromForm]
    private Student? StudentForm { get; set; }
    private List<ParentShortDetails>? ParentDetails { get; set; }
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {

        if (StudentForm is null)
            StudentForm = new();
        if (ParentDetails is null)
            ParentDetails = await StudentHandler.GetParentShortDetails();

    }

    private async Task Submit()
    {
        try
        {
            if (StudentForm is not null)
            {
                var response = await StudentHandler.AddStudent(StudentForm);
            }
            await Swal.FireAsync(new SweetAlertOptions
                {
                    
                   Icon = SweetAlertIcon.Success,
                        Title = $"Student {StudentForm!.FirstName} has been added successfully",
                        ShowConfirmButton =  false,
                        Timer = 1500 
                    
                }

                 
            );
            NavigationManager.NavigateTo("/students/list");
            StateHasChanged();


        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }
  


    }

 
}