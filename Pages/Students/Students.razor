@inject PageUrls PageUrls;
@attribute [Route(PageUrls.ListStudentUrl)];
@inject HttpClient Http
@using TestBlazor.Handlers
@using TestBlazor.Models
@inject IConfiguration Config
@inject IStudentHandler StudentHandler
@inject SweetAlertService Swal;

<PageTitle>Students</PageTitle>

<h4>Students</h4>


@if (students == null)
{
    <p><em>Loading...</em></p>
}

else
{

    <div class="col-auto my-1">
        <label class="mr-sm-2" for="inlineFormCustomSelect">Parent</label>
        <select class="custom-select mr-sm-2" id="inlineFormCustomSelect"  @onchange="OnSelectedParentChanged">
            <option selected value="All">Choose...</option>
            @if(parentsNames != null)
            {
                @foreach (var parent in parentsNames)
                {
                    <option value="@parent">@parent</option>


                }
            }
       
        </select>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Parent Name</th>
                <th>Registered At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.FirstName</td>
                    <td>@student.LastName</td>
                    <td>@student.ParentName</td>
                    <td>@student.CreatedAt.ToString()</td>
                    <td>


                        <a class="btn btn-primary mr-2" href=@($"{PageUrls.EditStudentUrl}{student.Id}")>Edit</a>
                        <button type="submit" class="btn btn-danger mr-2" @onclick="() => DeleteStudent(student.Id)">Delete</button>

                    
                    </td>
             
                </tr>
            }

        </tbody>
    </table>
}

@code {
    private List<Student?>? students;
    private IEnumerable<Parent>? parentsWithStudents;
    private List<string?>? parentsNames;
    private string? requestUrl;
    private Parent[]? parents;
    private string? selectedParent;

    private async Task LoadData()
    {
        students = await StudentHandler.GetStudentsWithParents();

        if (students is not null)
        {

            parentsNames = students.Select(
                 p => p.ParentName
              ).Distinct().ToList();

        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {



            await LoadData();



        }

        catch(Exception ex)
        {

            students = null;
        }


    }

    private async void OnSelectedParentChanged(ChangeEventArgs e)
    {
        students = await StudentHandler.GetStudentsWithParents();
        if(students is not null)
        {
            var selectedParent = e?.Value?.ToString();

            if (selectedParent != "All")
            {
                students = students!.Where(
          p => p.ParentName.Equals(selectedParent)
          ).ToList();


            }
            StateHasChanged();

        }




    }

    private async Task DeleteStudent(int studentId)
    {
        Student? student = new();
        // Promise/Task based
        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You will not be able to recover this imaginary file!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "No, keep it"
            }).ContinueWith(async swalTask =>
    {
    SweetAlertResult result = swalTask.Result;
    if (!string.IsNullOrEmpty(result.Value))
    {
        // call delete student api here
        student = await StudentHandler.DeleteStudentById(studentId);
        if (student is not null)
        {
            await LoadData();
            StateHasChanged();
        }
    
        await Swal.FireAsync(
       "Deleted",
       $"Student {student!.FirstName} deleted successfully!",
       SweetAlertIcon.Success
       );

    }
    else if (result.Dismiss == DismissReason.Cancel)
    {
        await Swal.FireAsync(
       "Cancelled",
       "Your imaginary file is safe :)",
       SweetAlertIcon.Error
       );
    }
        });
     
       
    }

  


}
