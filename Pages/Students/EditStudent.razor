@inject PageUrls PageUrls;
@attribute [Route(PageUrls.EDIT_STUDENT_URL+@"{studentId:int}")];
@using TestBlazor.Models
@inject IStudentHandler StudentHandler;
@inject SweetAlertService Swal;
@inject NavigationManager NavigationManager


<PageTitle>Edit Student</PageTitle>

<h4>Edit a Student details</h4>





<EditForm Model="StudentForm" OnValidSubmit="Submit" FormName="edit-student">
    <AntiforgeryToken />
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group mx-sm-3 mb-3 mx-lg-4 mx-md-4 w-25">
        <label for="exampleFormControlSelect1">Parent Name</label>
        <select class="form-control" id="exampleFormControlSelect1" required @bind="StudentForm!.ParentId">
            <option selected value="">Choose...</option>
            @if (ParentDetails != null)
            {
                @foreach (var parent in ParentDetails)
                {
                    if(StudentForm!.ParentId == parent.Id)
                    {
                        <option value="@parent.Id" selected>@parent.FullName</option>
                    }
                    else
                    {
                        <option value="@parent.Id">@parent.FullName</option>
                    }
                  


                }
            }
            
        </select>
    </div>
    <div class="form-group mx-sm-3 mb-3 mx-lg-4 mx-md-4 w-25">
        <label for="exampleInputEmail1">First Name</label>
        <InputText @bind-Value="StudentForm!.FirstName" type="text" class="form-control" id="exampleInputStudentFirstName" placeholder="Enter student first name" required />
    </div>
    <div class="form-group mx-sm-3 mb-3 mx-lg-4 mx-md-4 w-25">
        <label for="exampleInputEmail1">Last Name</label>
        <InputText @bind-Value="StudentForm!.LastName" type="text" class="form-control" id="exampleInputStudentLastName" placeholder="Enter student last name"  required />
    </div>
    <div class="form-group mx-sm-3 mb-3 mx-lg-4 mx-md-4 w-25 mt-3">
        <button type="submit" class="btn btn-primary">Update</button>
    </div>
</EditForm>

@if (errorMessage != null)
{
    <p>@errorMessage</p>
}


@code {
    private Student? StudentForm = new();
    private List<ParentShortDetails>? ParentDetails { get; set; }
    private string? errorMessage;

    [Parameter]
    public int studentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            StudentForm = await StudentHandler.GetStudentById(studentId);
            ParentDetails = await StudentHandler.GetParentShortDetails();
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }


    }

    private async Task Submit()
    {
        try
        {
            if (StudentForm is not null)
            {
                var response = await StudentHandler.UpdateStudent(studentId,StudentForm);
                await Swal.FireAsync(new SweetAlertOptions
                    {

                        Icon = SweetAlertIcon.Success,
                        Title = "Student:" + $"{StudentForm!.FirstName} details updated successfully",
                        ShowConfirmButton = false,
                        Timer = 1500

                    }


           );
            }
            else
            {
                Console.WriteLine("form is null dude");
            }

            NavigationManager.NavigateTo(PageUrls.LIST_STUDENT_URL);
            StateHasChanged();


        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }



    }


}